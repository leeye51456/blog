{"componentChunkName":"component---src-templates-post-js","path":"/post/2021/06/07/retrying-failed-project","result":{"data":{"markdownRemark":{"html":"<h2>망한 프로젝트</h2>\n<p>작년 중반에 번거로운 동작을 한번에 수행하기 위해 <a href=\"https://github.com/leeye51456/image-list-maker\">프로젝트</a> 하나를 잠깐 진행했다. 저장소는 4월에 만들어 두었고, 6-7월에 진행했다. 프로젝트는 점점 산으로 가다가 망했다. 뭘 하려고 했는지 목적과 본질과 방향을 잃었다.</p>\n<h3>프로젝트의 목표와 계기</h3>\n<p>원래는 방송 자막 편집·송출 프로그램(GenCG)에서 다루는 자막 파일의 내용을 TGA 형식의 이미지로 내보낸 것을 PDF로 묶어 내는 웹 앱을 만드는 것이 목표였다. 이런 목표를 세우게 된 계기는 다음과 같다.</p>\n<ol>\n<li>GenCG 없이 어떤 기기에서든 자막 파일의 내용을 확인할 수 있게 하고 싶었다.</li>\n<li>공유되는 파일 크기를 더 줄이고 싶었고, 그 내용을 한 파일에서 확인 가능하게 하고 싶었다.</li>\n<li>위의 절차를 한번에 하고 싶었다.</li>\n</ol>\n<h4>1. GenCG 없이 어떤 기기에서든 자막 파일의 내용을 확인할 수 있게 하고 싶었다.</h4>\n<p>GenCG에는 ‘이미지로 저장’ 기능이 있는데, TGA, JPEG, BMP 포맷만 지원한다. 이들 중 기본 포맷은 32비트 TGA이며, 압축 없이 저장한다. <small>(JPEG 포맷은 압축 포맷이지만 알파 채널을 지원하지 않으므로 탈락이다.)</small> 그러나 Windows의 탐색기와 기본 이미지 뷰어로는 TGA 파일의 내용을 확인할 수 없고, 일괄 변환을 하려면 별도의 앱이 필요하다. 양질의 무료 이미지 뷰어 일부가 TGA 포맷을 지원하기는 하지만, GenCG에서 추출한 이미지의 알파 채널을 제대로 인식하지 못한다. 따라서 TGA 이미지를, 어디서든 볼 수 있는 포맷으로 변환하고 싶었다.</p>\n<h4>2. 공유되는 파일 크기를 더 줄이고 싶었고, 그 내용을 한 파일에서 확인 가능하게 하고 싶었다.</h4>\n<p>그동안 파일 크기를 줄이기 위해서 이미지 크기(Dimension)를 줄였고, 한 파일에서 확인 가능하게 하기 위해서 PDF로 묶었다. 그 절차는 다음과 같다.</p>\n<ol>\n<li><strong>비손실 압축</strong>: macOS의 기본 이미지 및 PDF 뷰어 앱인 미리보기(Preview) 앱에서 ‘파일 - 선택한 이미지 내보내기’ 기능을 이용하여 PNG로 일괄 저장한다.</li>\n<li>\n<p><strong>축소</strong>: PNG로 저장한 것을 PhotoScape X 앱으로 열어서, 이미지 크기를 1/3이나 1/2로 일괄 축소한다.</p>\n<ul>\n<li>미리보기 앱에서 ‘도구 - 크기 조절’ 기능으로 일괄적으로 크기를 줄이면, 앱을 끌 때 변경 사항을 저장할 것인지를 <strong>각 파일마다</strong> 묻는다. 자막 파일이 100페이지 이상 나오기 때문에, 일괄 축소는 다른 앱을 이용했다.</li>\n</ul>\n</li>\n<li><strong>압축 효율 최적화</strong>: 압축 효율이 좋지 않은 이미지는 JPEG 포맷으로 변환한다.</li>\n<li><strong>한 파일로 묶기</strong>: 결과물을 모두 선택하고 Keynote로 끌어와서 PDF로 내보낸다.</li>\n</ol>\n<h4>3. 위의 절차를 한번에 하고 싶었다.</h4>\n<p>GenCG는 Windows용 프로그램이다. 거기서 뽑아 낸 TGA 파일을 압축 이미지 포맷으로 변경하고, 사이즈를 줄이고, PDF로 묶는 작업은 macOS로 옮겨 와서 진행했다. 일주일에 한 번 하는 과정이지만, 페이지 수가 많다 보니 각 절차 사이에 기다리는 과정이 끼어서 꽤 번거로웠다.</p>\n<h3>그러나 어수선했던 진행 과정</h3>\n<p>당시 프로젝트 진행 과정은 뒤죽박죽이었고 엉망이었다. 일단 커밋 로그를 보니, Create React App으로 초기화를 한 뒤에 아무 기록이 없다. 기억을 더듬어 보니, 무슨 구체적인 메뉴 구조를 고민하고, TGA는 어떻게 읽어 올 것이며, PDF는 어떻게 만들 것인지 같은 것을 찾아보고 있었던 것 같다. 그러다가 잘 안 그려지니까 뒤늦게 프로토타이핑을 시작했다. 이 과정에서 ‘이미지 리스트 편집’같이 굳이 초기에 구현하지 않아도 될 기능이 여럿 끼어들었다. 그렇게 나온 (벌써 이상해 보이는) 그림을 토대로, 들어가야 하는 기능과 그 우선순위를 구체적으로 생각하지도 않고 바로 구현하려 했다. 눈에 보이는 대로 만들어 보다가 추가하고 싶은 기능이 생기면 바로 “도전!”부터 외치고 (애초에 존재하지도 않던) 우선순위를 무시하고 그 기능에 매달렸다. 그렇게 이 프로젝트는 어디서부터 손을 대야 할지 엄두가 나지 않는 프로젝트가 되었고, 끝내 버려졌다.</p>\n<p>진행 과정이 얼마나 어수선했는지, 그 과정을 쓴 문단(↑)마저 어지럽다. 이걸 다시 도전하면서 <mark>당시의 문제점</mark>을 분석했는데, 정리하면 다음과 같다.</p>\n<ul>\n<li>프로토타이핑 단계에서 시간을 질질 끎</li>\n<li>\n<p>기본적인 기능과 거리가 먼 기능부터 구현하려 함</p>\n<ul>\n<li>요구사항을 구체화하지 않고 눈에 보이는 대로 무작정 코드부터 작성함</li>\n<li>구현하려는 기능의 우선순위를 생각하지 않음</li>\n</ul>\n</li>\n<li>처음부터 완벽해 보이는 UI를 만들려 함</li>\n<li>처음부터 과도한 기능을 넣으려 함</li>\n<li>중간에 과도한 기능을 추가하고 바로 반영하려 함</li>\n</ul>\n<hr>\n<h2>다시 새로 진행한 프로젝트</h2>\n<p>(최종 결과물은 <a href=\"https://leeye51456.github.io/gencg-exported-image-group/\">https://leeye51456.github.io/gencg-exported-image-group/</a>에서 확인할 수 있다. 나중에 수정 사항이 생기면 여기서 말한 것과 달라질 수 있다.)</p>\n<h3>다시 진행하게 된 계기</h3>\n<p>올해 5월 말, 1년 전과 똑같은 생각이 들었다. ‘GenCG → TGA 추출 → macOS로 이동 → PNG 변환 → 축소 → PDF 변환’이라는 일련의 과정이 번거로웠고, 각 단계마다 작업을 걸어 놓고 애매한 시간을 기다리는 게 불편했다. 그렇다고 산으로 간 프로젝트를 되살려서 진행할 엄두는 나지 않았다. <a href=\"https://github.com/leeye51456/image-list-maker\">산으로 간 프로젝트</a>는 버리고, <a href=\"https://github.com/leeye51456/gencg-exported-image-group\">프로젝트를 처음부터 다시 시작</a>하기로 했다.</p>\n<h3>개선 사항</h3>\n<p>망한 경험을 토대로, 이번에는 이렇게 하기로 했다.</p>\n<ul>\n<li>최소한의(정말 필요한) UI만 작성한다.</li>\n<li>\n<p>필요한 핵심 기능만 기획·설계한다.</p>\n<ul>\n<li>추가되면 좋을 만한 내용은 따로 메모해 두었다가 핵심 기능 구현 후에 적용한다.</li>\n</ul>\n</li>\n<li>여러 과제 테스트에서 본 요구사항처럼, 구현해야 하는 내용을 구체화한다.</li>\n</ul>\n<p>여기에 더해서, 해커톤에서 하는 것처럼 가능한 빨리 만들어 보기로 했다. 그렇게 하지 않으면 지난번처럼 질질 끌게 될 것 같았기 때문이다.</p>\n<h3>기본 기능 구현</h3>\n<p>핵심 기능을 다음과 같이 정하고 구현했다. 거의 라이브러리를 가져다 써서 만들었다.</p>\n<ol>\n<li>TGA → PNG 변환</li>\n<li>이미지 축소</li>\n<li>PDF 생성</li>\n</ol>\n<h4>1. TGA → PNG 변환</h4>\n<p>TGA 포맷을 읽기 위해서 <a href=\"https://www.npmjs.com/package/tga-js\"><code>tga-js</code></a>를 활용했다. 처음에는 PNG로 변환한 결과를 Base64 String으로 받았는데, 나중에는 배경색과 합치기 위해서 <code>&#x3C;canvas></code> 엘리먼트를 받는 방식으로 변경했다.</p>\n<h4>2. 이미지 축소</h4>\n<p>이미지 축소는 <a href=\"https://www.npmjs.com/package/browser-image-compression\"><code>browser-image-compression</code></a>을 활용했다. 보간을 안 하는지, 이미지를 1/3로 줄였을 때의 결과물에서 계단이 보였다. 그래서 이것 대신에 직접 <code>&#x3C;canvas></code>를 활용하여 줄여 보기도 했는데, 이미지 파일 크기 감소 비율은 이 모듈이 훨씬 좋았다. 계단이 보이더라도 내용을 보는 데는 전혀 문제가 없었고, 1/2로 줄이면 계단 현상이 덜했으며, 애초에 자막 파일의 ‘초안’을 공유하는 것이 목적이었기 때문에 이 모듈을 계속 쓰기로 했다.</p>\n<h4>3. PDF 생성</h4>\n<p>PDF 생성은 <a href=\"https://parall.ax/products/jspdf\"><code>jspdf</code></a>(<a href=\"https://www.npmjs.com/package/jspdf\">npm</a>)를 활용했다. 각 페이지마다, 배경으로 쓸 회색 직사각형을 그린 뒤에 축소한 이미지를 얹었다.</p>\n<h3>기능 추가 및 개선</h3>\n<p>핵심 기능을 구현한 뒤에는, 추가로 떠오른 기능을 하나둘 구현했다.</p>\n<ol>\n<li>페이지 번호 표시</li>\n<li>처리 과정 변경</li>\n<li>결과 파일 크기 개선</li>\n<li>진행도 가중치</li>\n<li>사용자 설정</li>\n</ol>\n<h4>1. 페이지 번호 표시</h4>\n<p>지금까지의 결과물은 이미지를 순서대로 각 페이지에 나열하기만 한다. 보고 있는 페이지가 몇 페이지인지를 확인하려면 PDF 뷰어의 다른 UI를 참고해야 한다. 따라서 각 페이지의 오른쪽 위 부분에 페이지 번호가 붙게 했다.</p>\n<p>다만, 텍스트를 Fill And Stroke 방식으로 그리면 Stroke가 Fill을 가려서 페이지 번호가 어색하게 보였다. 텍스트의 Stroke를 먼저 그린 뒤, 같은 자리에 Fill을 그리는 방식으로 문제를 해결했다.</p>\n<h4>2. 처리 과정 변경</h4>\n<p>그동안 이미지 처리를 두 단계로 진행했다.</p>\n<ol>\n<li>TGA 파일 선택 시: TGA를 PNG로 변환</li>\n<li>‘PDF 생성’ 버튼 클릭 시: 이미지 축소 및 PDF 빌드</li>\n</ol>\n<p>하지만 다음과 같은 문제가 있었다.</p>\n<ul>\n<li>파일을 잘못 선택하면 1단계 작업이 완료될 때까지 기다려야 한다.</li>\n<li>1단계와 2단계를 구분하는 기준에 설득력이 없다. <small>(사실은, 별다른 이유 없이 그냥 정했다.)</small></li>\n<li>\n<p>처리 과정이 한번에 이루어지지 않는다. <mark>(1) 파일을 선택할 때</mark>와 <mark>(2) ‘PDF 생성’ 버튼을 눌렀을 때</mark>, 총 두 번을 기다려야 한다.</p>\n<ul>\n<li>‘TGA 로드 → PNG 변환 → 이미지 축소’ 과정은 개별 파일 단위로 한번에 진행할 수 있다. 굳이 두 번 기다릴 이유가 없다.</li>\n</ul>\n</li>\n</ul>\n<p>그래서 TGA 파일을 선택했을 때는 파일 객체 배열만 기록해 두었다가, ‘PDF 생성’ 버튼을 눌렀을 때 모든 처리가 진행되도록 변경했다.</p>\n<h4>3. 결과 파일 크기 개선</h4>\n<p>자막 파일의 일부 페이지에는 JPEG 이미지 리소스가 들어 있다. 그 외에도 PNG보다는 JPEG 쪽이 압축 효율이 좋은 페이지가 일부 존재할 수 있다.</p>\n<p>따라서 이미지를 축소한 뒤 배경색을 합성한 것을 PNG와 90% JPEG으로 압축하고, 파일 크기를 비교하여, 정해 둔 기준에 따라 한 포맷을 선택하도록 수정했다. 단, PNG가 비손실 압축 포맷이므로 웬만하면 PNG를 쓰려고 했다.</p>\n<ul>\n<li>PNG 크기가 JPEG 크기의 1.1배 이하인 경우 PNG 사용</li>\n<li>그 외에는 JPG 사용</li>\n</ul>\n<h4>4. 진행도 가중치</h4>\n<p>PDF 빌드 과정이 멈춘 것처럼 보이지 않게 하기 위해 진행도를 표시했다. 처음에는 한 이미지의 한 단계를 처리할 때마다 동일한 비중으로 진행도를 올리려 했다. 하지만 진행도가 어떤 단계에서는 천천히 올랐고, 어떤 단계에서는 너무 빨리 올랐다. 그래서 단계별로 걸리는 <small>(Outlier를 제외한)</small> 평균 시간을 <code>console.time()</code> 등으로 측정해서, 단계별 진행도 가중치를 정의하여 반영했다.</p>\n<p>개별 이미지마다 진행도 가중치의 합이 각각 1이 되도록 했다. 개별 이미지 처리 과정 각 단계의 가중치는 부동 소수점 오차 문제를 방지하기 위해 2진수로 나타냈을 때 유한소수가 되도록 정의했다. PDF 빌드 단계에는 이미지 처리 단계와는 별도로 가중치를 주었는데, 의외로 금방 넘어가서 가중치를 1로 정의했다.</p>\n<h4>5. PDF 출력 설정</h4>\n<p>PDF 출력 설정은 중간중간 추가했다. 초기에는 고정된 값으로 주어졌던 배경색, 페이지 번호 표시 여부, PDF 크기를 사용자가 직접 지정할 수 있도록 변경했다. 이 과정은 난이도가 어렵지 않았다. 컴포넌트에 State를 추가하고 PDF 생성 과정과 UI에 반영한 것이 전부였다.</p>\n<h3><code>gh-pages</code>를 이용하여 GitHub Pages로 배포</h3>\n<p>여기서 실수를 했다. <code>main</code> 브랜치에서 <a href=\"https://www.npmjs.com/package/gh-pages\"><code>gh-pages</code></a>를 이용하여 GitHub Pages로 배포를 하긴 했는데, 실제 배포된 환경에서 React 앱이 초기화되지 않는 것을 발견했다. 잠시 고민하면서 이전에 만들었던 React 앱들을 살펴보다가, 이내 <code>package.json</code>에서 <code>homepage</code> 필드를 설정하지 않았다는 것을 깨달았다.</p>\n<p><code>react-scripts</code>는 결과물의 루트가 <code>package.json</code>의 <code>homepage</code> 필드의 값이라고 가정하고 빌드한다. ‘GitHub 저장소를 위한 GitHub Pages’처럼 서브 디렉터리를 루트로 사용하는 경우 이 필드를 설정해야 한다. 여기서는 <code>homepage</code> 필드를 <code>\"https://leeye51456.github.io/gencg-exported-image-group/\"</code>으로 지정하고 배포하여 문제를 해결했다.</p>\n<h3>추후 계획</h3>\n<ul>\n<li>퍼포먼스 최적화(시간, 메모리): 이미지를 처리하는 데 시간이 꽤 걸린다. 메모리도 많이 사용한다. 따라서 할 수 있는 선에서 최적화를 해 보고 싶다.</li>\n<li>파일명에서 페이지 번호를 인식하여 PDF에 반영: GenCG에서 ‘그림으로 저장’ 기능으로 이미지 파일을 뽑아내면 실제 파일명은 <code>파일명xxxxx.확장자</code> 형태로 나온다. 여기서 <code>xxxxx</code>를 뽑아내면 해당 이미지의 페이지 번호를 알 수 있다.</li>\n<li>코드 분리: 지금은 거의 한 파일에 모든 내용이 들어 있다. 이걸 기능 단위로 분리하고 싶은데, Hook 관련 내용이 엮여 있어서 고민을 좀 해 봐야 할 것 같다.</li>\n<li>CSS 작성</li>\n</ul>\n<hr>\n<h2>소감</h2>\n<p>핵심 기능부터 구현하면 이렇게 금방 끝낼 것을, 작년에는 너무 질질 끌었다. 이번에는 요구사항을 나열하고 필수 기능을 선정하는 데 2시간 정도 걸린 것 같다. 최소 기능인 ‘TGA → PNG 변환 → PDF 빌드’는 5시간 만에 구현했다. 그 뒤로 기능을 조금씩 추가 구현했다. 7시간 동안 최소 기능을 구현했고, 이틀에서 사흘 안에 웬만한 기능은 다 구현했다.</p>\n<p>결국, <mark>기능을 정의한 뒤에 중요도 순서를 정해서 진행하자는 교훈</mark>을 얻었다. 몇 차례 과제 테스트를 보면서 배운 것이기도 하다. 작년보다 조금이라도 나아진 것 같아서 다행이고 뿌듯하지만, 방심해서는 안 되겠다. 여전히 부족한 점도 많고, 배워야 할 것도 많기 때문이다.</p>","frontmatter":{"slug":"/post/2021/06/07/retrying-failed-project","date":"2021-06-07","revisions":[],"title":"망한 프로젝트 다시 도전하기","description":"이전에 망하고 흐지부지된 프로젝트를 처음부터 다시 진행해 보았다.\n","license":{"post":"CC BY-NC 4.0","code":"The Unlicense"},"keywords":["재도전","소감"]}}},"pageContext":{"slug":"/post/2021/06/07/retrying-failed-project"}},"staticQueryHashes":["3649515864","63159454"]}