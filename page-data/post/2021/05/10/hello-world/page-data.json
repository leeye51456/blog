{"componentChunkName":"component---src-templates-post-js","path":"/post/2021/05/10/hello-world","result":{"data":{"markdownRemark":{"html":"<p>이제까지 여러 가지 공부를 했고 여러 경험이 있었지만 그 기록은 얼마 남아 있지 않다. 그래서 개인 블로그를 개설해서 기록하면 좋겠다는 생각을 했다. 하지만 이미 작년에 Tistory 블로그를 만들어서 시도했지만 한 달을 못 갔다. 왜 그렇게 됐을까?</p>\n<p>사람이란 게, 마음을 굳게 먹지 않으면 점점 느슨해지는 것 같다. Steam에서 할인받아 구매했지만 결국 잊어버리고 플레이 기록 없이 쌓여만 가는 게임. 기록은 해 두었지만 다시는 읽지 않는 메모. 좋은 글을 발견하여 북마크해 두었지만 결국 읽지 않고 쌓여만 가는 읽기 목록. 머릿속을 스쳐갈 때마다 기록해 두었지만 이내 잊어버리고 여전히 손도 대지 않은 개발 버킷 리스트. 이런 것들이 다 그런 결과 아닐까.</p>\n<p>심지어 이 블로그를 만들다가 배운 것마저도 Notion 어딘가에 간단하게 기록만 해 놓고 아직도 제대로 정리하지 못했다. 이런 쳇바퀴에서 벗어나기 위해 개인 블로그를 다시 시작하기로 마음먹었다. (다행히 일단 마음먹고 블로그를 만들긴 했다.)</p>\n<hr>\n<h2>플랫폼별 비교</h2>\n<p>먼저, 제 뜻을 실어 펼 수단과 방법을 찾아보았다. 알아보고 사용을 고려한 바는 다음과 같았다.</p>\n<ul>\n<li>Velog</li>\n<li>Tistory 블로그</li>\n<li>Naver 블로그</li>\n<li>Medium</li>\n<li>Notion</li>\n<li>직접 만들기</li>\n</ul>\n<p>각각에 대해 (내 입장에서의) 장단점을 정리해 보았다.</p>\n<h3>Velog</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>Markdown으로 글을 작성하여, 일관성 있는 서식을 적용하기 편리하다.</li>\n<li>게시물마다 하나씩만 지정할 수 있는 카테고리를 사용하지 않고, 태그만으로 게시물을 분류한다. (가끔 한 게시물을 두 카테고리에 넣고 싶을 때가 생기는데 이때 고민을 줄일 수 있다.)</li>\n</ul>\n</li>\n<li>\n<p>단점(2021년 2-4월에 비회원 상태로 조사)</p>\n<ul>\n<li>게시물 URL에 Non-ASCII 문자가 들어간다.</li>\n<li>게시물 수십 개를 조사해 봤는데, 게시물 URL(Slug)을 원하는 대로 지정할 수 없는 것 같다. 티스토리 블로그처럼 작성 순번으로 지정할 수도 없는 것 같다.</li>\n</ul>\n</li>\n</ul>\n<h3>Tistory 블로그</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>WYSIWYG 에디터와 Markdown 에디터 중 원하는 글쓰기 방식을 선택할 수 있다.</li>\n<li>다른 사람이 만든 스킨을 쉽게 적용할 수 있고, 내가 직접 커스터마이징할 수도 있다.</li>\n<li>모바일 전용 페이지 설정을 끄고 반응형 스킨을 적용하면 게시물의 URL을 하나로 통일할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>단점(2020년 1월에 확인)</p>\n<ul>\n<li>Markdown으로 글 작성 시, Markdown 원문 그대로 보존되지 않는다. 글을 저장하고 다시 불러온 뒤 Markdown 모드로 들어가면, 코드 블록의 문법 강조 언어가 유지되지 않는다.</li>\n<li>코드 블록의 언어로 plaintext를 선택할 수 없었다. 다시 말해서, 코드 블록의 문법 강조를 끌 수가 없다.</li>\n</ul>\n</li>\n</ul>\n<h3>Naver 블로그</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>서비스가 안정적이지 않을까 하는 기대감이 있다.</li>\n<li>댓글 알림을 네이버 앱으로 바로 받을 수 있다. (네이버 앱을 쓴다고 하면 장점)</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>Google 검색에 잘 노출되지 않는다. 그마저도 모바일 페이지만 나오는 것 같다.</li>\n<li>PC와 모바일 페이지의 URL이 다르다.</li>\n<li>모바일에서 PC 페이지로 접속하면 모바일 페이지로 넘어가지만, PC에서는 모바일 페이지로 접속해도 PC 페이지로 넘어가지 않는다.</li>\n</ul>\n</li>\n</ul>\n<h3>Medium</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>글쓰기에 집중할 수 있는 에디터를 제공한다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>한글 폰트 적용이 이상하다. macOS, Windows 등에서는 기본 세리프 한글 폰트의 가독성이 매우 안 좋다. 모바일 OS에서는 한글 산세리프 폰트가 없는 경우 영문은 세리프로, 한글은 산세리프로 보인다.</li>\n<li>코드 블록 지원이 부실하다고 한다.</li>\n</ul>\n</li>\n</ul>\n<h3>Notion</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>Markdown과 호환되는 블록 에디터를 제공하여 글쓰기에 집중할 수 있고, 일관성 있는 서식을 적용하기도 편리하다.</li>\n<li>수식도 지원한다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>표 지원이 부실하다.</li>\n<li>서비스가 불안정하다는 느낌을 받았다. 수 차례의 서버 문제와 도메인 문제를 겪었다.</li>\n<li>제목 수정 시 게시물 URL도 함께 바뀐다.</li>\n<li>별도의 조치를 하지 않으면 검색엔진에 노출되지 않는다.</li>\n</ul>\n</li>\n</ul>\n<h3>직접 만들기</h3>\n<p>Site Generator로 직접 만들어서 호스팅 서비스로 배포하기</p>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>자유도가 높다. — 내가 원하는 대로 만들 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>자유도가 높다. — 내가 직접 만들어야 한다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>직접 만들자</h2>\n<p>이리저리 찾아보니, 내가 원하는 기능이 원하는 형태로 모두 들어간 블로그 서비스는 없었다. 이제 두 가지 선택지 중 하나를 골라야 한다. 하나는 몇 가지 기능을 포기하는 것이고, 다른 하나는 원하는 기능이 모두 들어가도록 직접 만드는 것이다.</p>\n<p>나는 여기서 직접 만드는 쪽을 선택했다. 내가 직접 만들어야 하고, 새로운 걸 배워야 하고, 아직 해 본 적 없는 걸 시도해야 한다. 하지만 새로운 걸 시도하고 도전해 볼 수 있다는 점에서 괜찮은 선택이었다. 이 과정에서 뭔가 얻어 갈 수 있을 거라는 기대감도 있었다.</p>\n<h3>프레임워크 결정하고 공부하기</h3>\n<p>블로그를 직접 만드는 방법은 다양하다. 어디에 어느 기술을 적용할 것인지 직접 결정해야 한다. 나는 React 기반의 Static Site Generator인 Gatsby를 사용해 보기로 했다. 그리고 여기에 CSS 프레임워크로 이전에 써 봤는데 괜찮았던 Tailwind CSS를 붙였다.</p>\n<p>Gatsby는 처음이라 새로 배워야 했다. 공식 튜토리얼을 보면서 차근차근 공부했다. 공식 튜토리얼을 따라가면서 공부하고 난 뒤에, 간단하게 시험해 보기 위해 기본 스타터로 프로젝트를 만들어 봤다. 기본 스타터의 구조는 (튜토리얼을 잘 따라갔다고 가정했을 때) 어떤 문서를 찾아보면 좋을지 금방 알 수 있도록 잘 짜여 있었다.</p>\n<h3>프로토타이핑</h3>\n<p>Gatsby의 튜토리얼을 따라가 본 다음에는 Figma로 프로토타이핑을 했다. Figma도 처음 써 봐서 그런지 꽤 헤맸다. 그래도 키노트, 파워포인트나 어도비 일러스트레이터, 어피니티 디자이너 같은 것보다 프로토타이핑에 특화되어 있어서, 어느 정도 익숙해지고 난 뒤에는 그나마 수월하게 작업할 수 있었다. 나중에 블로그 UI를 뜯어 고친다면 Figma 같은 웹사이트·애플리케이션 프로토타이핑에 특화된 도구를 다시 사용할 것 같다.</p>\n<p>좁은 화면에서 넓은 화면으로 확장하는(Mobile First) 것이 반대의 경우보다 더 쉽다고 한다. 따라서 프로토타이핑은 모바일 → 태블릿 → 데스크톱 순서로 진행했다.</p>\n<p>각 기기 형태마다 필요한 페이지의 종류를 먼저 나열하고, 이렇게 나온 페이지마다 레이아웃을 작성했다. 그리고 페이지마다 들어가는 각 컴포넌트의 동작을 정의했다.</p>\n<p>프로토타이핑을 하다가 문득 생각해 보니, 나중에 뜯어 고치는 일을 줄이기 위해 너무 완벽하게 설계하려 하고 있었다. 물론 정확하고 깔끔하게 시작하는 게 좋긴 하다. 하지만 지금은 나중의 일을 걱정하기에는 너무 이른 단계인 것 같다는 생각을 했다. 처음부터 너무 완벽하게 하려다가 흐지부지되는 것보다는 직접 부딪치면서 배우는 게, 나에게는 훨씬 더 도움이 될 것 같았다.</p>\n<p>이 단계에서 아쉬웠던 점이 있다. Gatsby 학습과 동시에 프로토타이핑을 진행했다면 시간을 절약할 수 있지 않았을까 한다. 그렇게 하면 구조를 몇 차례 갈아 엎게 되지 않을까 하는 반문도 떠오르긴 하지만, 두 단계에서 내가 생각한 것보다 너무 많은 시간을 썼다는 생각이 지워지지가 않는다.</p>\n<h3>개발</h3>\n<p>아무튼... 프로토타이핑 후에는 프로젝트를 세팅하고 개발을 시작했다. <code>blog</code>라는 이름으로 새 프로젝트를 생성하고, 미리 만들어 둔 저장소를 원격 저장소로 등록하고, <code>develop</code> 브랜치를 만들어서 푸시했다. (별도 설정 없이 <code>develop</code>을 기본 브랜치로 만들기 위해 이 브랜치를 가장 먼저 푸시했다.)</p>\n<pre><code class=\"language-plaintext\">$ gatsby new blog\n$ cd blog\n$ git remote add origin https://github.com/leeye51456/blog.git\n$ git switch -c develop\n$ git push origin develop\n</code></pre>\n<p>안 쓸 플러그인을 삭제하고, 필요한 플러그인을 추가했다. 그 뒤로는 레이아웃 컴포넌트, 페이지, 템플릿을 작성했다. 마크업을 먼저 작성하고, GraphQL 쿼리도 붙이고, CSS를 작성했다.</p>\n<p>컴포넌트와 GraphQL 쿼리 등을 작성하는 과정에서 초기에 구현하기로 계획한 기능을 하나씩 빼기 시작했다. 일정이 자꾸 지연되는 것 같아서, 일단 최소한의 기능으로 오픈한 뒤에 하나씩 추가하는 게 낫겠다는 생각에서 나온 판단이었다.</p>\n<p>개인적으로 되짚어 보기로는, CSS 작성하는 과정이 가장 오래 걸린 것 같다. CSS를 작성하면서 레이아웃 컴포넌트의 크고 작은 수정이 자꾸 생겼다. 이때도 기기별 레이아웃을 통일해서, 좁은 기기에서는 너비 100%를, 넓은 기기에서는 최대 너비를 적용하는 방식으로 계획을 틀었다. 원래는 사이드바에 키워드별 글 목록으로 넘어가는 링크나 TOC(Table Of Contents)를 붙이려고 했는데, 당장에 필요한 기능은 아니라서 나중에 구현하기로 했다.</p>\n<hr>\n<h2>소감</h2>\n<p>생각하지 못했던 요소들이 튀어나와서 추가·변경하는 내용이 자주 생겼다. 예를 들자면, 나중에 뭐가 자꾸 생각이 나서 게시물의 frontmatter 스키마를 자주 변경한 것이라든지, CSS 수정 중에 마크업을 꽤 수정한 것? 결국 이 정도를 만드는 데 이만큼의 시간이 걸릴 일인가 싶은 지경까지 왔다. 이것도 개발의 한 과정이라면 이런 일을 줄이는 방법은 무엇이 있을까 하고 고민하게 된다.</p>\n<p>아직 복잡한 기능을 붙이지 않았고, 원래 계획했던 기능마저 다 개발을 미뤄서 그런지, 레이아웃과 페이지 위주의 작업이었다. GraphQL도 복잡한 쿼리가 들어가지는 않았다. 거의 마크업과 CSS 작업이 대부분이었던 것 같다. 추후에 미뤄 뒀던 기능을 구현할 때면 또 다른 소감을 말하게 될 것 같다.</p>\n<p>어느 정도 진행하고부터 느낀 건데, Gatsby 프레임워크 환경에서는 플러그인에 너무 의존하게 되는 것 같다. 어떤 기능을 붙이려고 자료를 찾아보면, 대부분은 플러그인이 나왔다. 뭔가를 하려면 결국 플러그인을 찾아야 하는 느낌이다. 예를 들어서, Markdown 관련 처리를 하려면 이런 플러그인을 달아야 한다.</p>\n<ul>\n<li>Markdown으로 작성한 게시물 문단 제목에 ID를 원하는 대로 주려면, <code>gatsby-remark-autolink-headers</code></li>\n<li>외부 링크가 새 탭에서 열리게 하려면, <code>gatsby-remark-external-links</code></li>\n<li>내부 링크에 CSR을 적용하려면, <code>gatsby-plugin-catch-links</code></li>\n<li>이런 플러그인을 쓰지 않고 직접 구현하고 싶다면, MDX 플러그인을 달고 컴포넌트를 정의해서 쓰기(플러그인에 덜 의존하기 위해서 플러그인을 다는 상황)</li>\n</ul>\n<p>무엇보다도, 블로그를 직접 만든다고 해서 기록을 더 열심히 남기게 되지는 않는 것 같다. 앞서 언급하지는 않았지만, 블로그를 직접 만들기로 한 이유 중에 “직접 고생해서 만들면 애착이 생겨서 잘 관리하게 될 것”이 있었는데 꼭 그렇지만은 않은 것 같다. 2021년 4월 말부터 5월 초까지의 커밋 로그를 보면 알 수 있다. 블로그를 만들어 놓고는 첫 글 작성을 미루고 미루다가 잔디밭 몇 주치를 말려 죽였다. (그리고 기록이 없으니 그 동안 뭔가 제대로 한 게 없는 것 같다.) 소감도 다 가물가물해져서 쥐어짜내고 있는 건 덤이다.</p>\n<p>그래도 처음 해 보는 도전이어서 처음 겪거나 새로 알게 된 것도 꽤 있다.</p>\n<h3>처음 겪은 것</h3>\n<ul>\n<li>\n<p>Gatsby를 이용한 Static Site Generation</p>\n<ul>\n<li>플러그인으로 잘 붙어서 직접 세팅하지는 않았지만, React Helmet 같은 것도 간접적으로 경험해 볼 수 있었다.</li>\n<li>앞으로 여러 페이지로 된 웹 개발을 하게 된다면, Gatsby를 또 활용하거나 Next.js를 공부해서 활용하게 될 것 같다.</li>\n</ul>\n</li>\n<li>간단한 GraphQL 쿼리 작성</li>\n</ul>\n<h3>새로 알게 된 것</h3>\n<ul>\n<li>\n<p>Gatsby에서 CSS 모듈 적용하기</p>\n<ul>\n<li>전에는 CSS 파일 이름을 그냥 <code>*.css</code>로 써도 CSS 모듈이 적용되었던 것 같은데(착각인가?), Gatsby에서는 CSS 모듈이 제대로 적용되지 않았다.</li>\n<li><a href=\"https://www.gatsbyjs.com/docs/tutorial/part-two/#using-component-scoped-css\">Gatsby 공식 튜토리얼</a>을 보니, CSS 파일의 이름을 항상 <code>*.module.css</code> 형태로 쓰고 있었다. Gatsby가 CSS 파일을 CSS 모듈로 처리하도록 하려면 그렇게 해야 한다는 내용도 있었다. 그래서 CSS 파일 이름을 이 형태로 바꿨고, 정상적으로 작동하기 시작했다.</li>\n</ul>\n</li>\n<li><a href=\"https://www.zerocho.com/category/CSS/post/588cb95ca63e64132496a5d5\">CSS 셀렉터 우선순위</a></li>\n</ul>\n<hr>\n<h1>앞으로의 계획(희망사항)</h1>\n<p>이제 블로그를 (기능을 빼서라도) 만들었으니, 기록을 열심히 남겨야겠다. GitHub 잔디밭에도 흔적이 잘 남으니 이젠 기록을 잘 남기는 일만 남았다.</p>\n<p>기록을 남기는 것과 별개로, 빼먹은 기능을 하나씩 추가할 예정이다. 구현 계획이 있었지만 뺀 기능은 TOC나 키워드 모음 같은 걸 보여주는 사이드바(좁은 기기에서는 토글 메뉴), 이전·다음 글 표시 기능 등이 있다. 아마 다크 모드도...?</p>\n<p>당연히 되는 줄 알았거나 미처 생각하지 못했지만 직접 달아야 하는 기능도 추가할 예정이다. 외부 링크를 새 탭에서 연다든지, 내부 링크에 CSR을 적용한다든지, 문단 제목에 ID를 원하는 대로 달고 앵커도 단다든지 하는 기능을 추가할 예정이다.</p>\n<p>나중에는 게시물을 보면서 댓글을 작성할 수 있도록, 방문자가 댓글 영역을 사이드바로 떼어낼 수 있는 기능도 추가할까 생각 중이다. 댓글로 사용 중인 <a href=\"https://utteranc.es/\">Utterances</a>가 <code>&#x3C;script></code>로 <code>&#x3C;iframe></code>을 불러오는 방식이라서 CSS로만 변화를 주어야 리로드나 중복 로드 없이 옮길 수 있을 것 같다.</p>\n<p>앞으로의 계획이 희망사항에 머무르거나 잊히지 않기를...</p>","frontmatter":{"slug":"/post/2021/05/10/hello-world","date":"2021-05-10","revisions":[],"title":"블로그 만든 이야기","description":"Gatsby로 개인 블로그를 만든 과정과 소감을 횡설수설하며 기록해 보았다.\n","license":{"post":"CC BY-NC 4.0","code":"The Unlicense"},"keywords":["Gatsby","블로그","소감"]}}},"pageContext":{"slug":"/post/2021/05/10/hello-world"}},"staticQueryHashes":["3649515864","63159454"]}